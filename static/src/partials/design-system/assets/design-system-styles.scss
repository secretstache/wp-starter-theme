@use "sass:math";
@use "sass:map";
@use "sass:string";
@use "sass:list";

@function map-deep-get($map, $keys...) {
	@each $key in $keys {
		$map: map.get($map, $key);
	}

	@return $map;
}

// returns value decreased or increased basing on percent
// usage percent(20, 10);
// usage percent(20, 10, up);
@function percent($val, $percent, $dir: down) {
	@if $dir == up {
		@return $val + $val * $percent / 100;
	} @else {
		@return $val - $val * $percent / 100;
	}
}

@function strip-unit($value) {
	$arg2: $value * 0 + 1;

	@return math.div($value, $arg2);
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @link http://sassmeister.com/gist/1b4f2da5527830088e4d
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
	$index: string.index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

/// Map Next
/// Find the next key in a map.
///
/// @param {map} $map - Map to traverse.
/// @param {mixed} $key - Key to use as a starting point.
///
/// @return The value for the key after `$key` if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns null.
@function map-next($map, $key) {
	// Store the values of the map as a list, so we can access them with nth
	$values: map.values($map);

	// Ghetto for loop
	$i: 1;
	$found: false;

	@each $val in map-keys($map) {
		@if $found == false {
			@if $key == $val {
				$found: true;
			}

			$i: $i + 1;
		}
	}

	// If the key doesn't exist, or it's the last key in the map, return null
	@if $i > length($map) {
		@return null;
	}

		// Otherwise return the value
	@else {
		@return nth($values, $i);
	}
}

$rem-base: 16px;

@function convert-to-rem($value, $base-value: $rem-base) {
	$value: math.div(strip-unit($value), strip-unit($base-value)) * 1rem;

	@if $value == 0 {
		$value: 0;
	}

	// Turn 0rem into 0
	@return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
	$max: list.length($values);

	@if $max == 1 {
		@return convert-to-rem(list.nth($values, 1), $base-value);
	}

	$rem-values: ();

	@for $i from 1 through $max {
		$rem-values: list.append($rem-values, convert-to-rem(list.nth($values, $i), $base-value));
	}

	@return $rem-values;
}


$breakpoints: (
	small: rem-calc(0),
	medium: rem-calc(640),
	large: rem-calc(1200),
	xlarge: rem-calc(1440),
	xxlarge: rem-calc(1920),
) !default;
$breakpoint-classes: (small medium large) !default;

@mixin breakpoint($val: small) {
	// Size or keyword
	$bp: list.nth($val, 1);

	// Value for max-width media queries
	$bp-max: 0;

	// Direction of media query (up, down, or only)
	$dir: if(list.length($val) > 1, list.nth($val, 2), up);

	// Eventual output
	$str: 'only screen';

	// Is it a named media query?
	$named: false;

	// Orientation media queries have a unique syntax
	@if $bp == 'landscape' or $bp == 'portrait' {
		$str: $str + ' and (orientation: #{$bp})';
	} @else {
		// Try to pull a named breakpoint out of the $breakpoints map
		@if type-of($bp) == 'string' {
			@if map-has-key($breakpoints, $bp) {
				@if $dir == 'only' {
					$next-bp: map-next($breakpoints, $bp);

					@if not $next-bp {
						$bp-max: null;
					} @else {
						$bp-max: $next-bp - math.div(1, 16);
					}
				}
				$bp: map.get($breakpoints, $bp);
				$named: true;
			} @else {
				$bp: 0;
			}
		}

		// Pixel and unitless values are converted to rems
		@if unit($bp) == 'px' or unit($bp) == '' {
			$bp: rem-calc($bp);
		}

		@if unit($bp-max) == 'px' or unit($bp-max) == '' {
			$bp-max: rem-calc($bp-max);
		}

		// Finally, the rem value is turned into an em value
		$bp: strip-unit($bp) * 1em;
		$bp-max: strip-unit($bp-max) * 1em;

		// Skip media query creation if the input is "0 up" or "0 down"
		@if $bp > 0 or $dir == 'only' {
			// And lo, a media query was born
			@if $dir == 'only' {
				@if $named == true {
					$str: $str + ' and (min-width: #{$bp})';

					@if $bp-max {
						$str: $str + ' and (max-width: #{$bp-max})';
					}
				} @else {
					@debug 'ERROR: Only named media queries can have an "only" range.';
				}
			} @else if $dir == 'down' {
				$max: $bp - math.div(1, 16);
				$str: $str + ' and (max-width: #{$max})';
			} @else {
				$str: $str + ' and (min-width: #{$bp})';
			}
		}
	}

	// Output
	@if $bp == 0 and $dir != 'only' {
		@content;
	} @else {
		@media #{$str} {
			@content;
		}
	}
}

/// Prefixes selector $class with breakpoint keywords, allowing you to create a batch of breakpoint classes with one chunk of code. If you want to skip a breakpoint (like small, because mobile first and all that), add values to the $omit parameter.
///
/// @param {string} $class - Class to prefix with the breakpoint name and a hyphen.
/// @param {list} $omit - Named breakpoints to skip. No class will be added with breakpoints in this list.
@mixin each-breakpoint($class, $omit: ()) {
	// Iterate through breakpoint classes
	@each $size in $breakpoint-classes {
		// Only do something if the breakpoint is not in $omit
		@if not index($omit, $size) {
			$val: map.get($breakpoints, $size);

			// Prefix $class with $size and a hyphen
			.#{$size + '-' + $class} {
				@include breakpoint($size) {
					@content;
				}
			}
		}
	}
}

:root {
    --ds-sidebars-paddings: 20px;
    --ds-content-paddings: 40px;
    --ds-sidebar-bg: #161f50;
    --ds-sidebar-color: white;
    --ds-sidebar-width: 240px;
    --ds-accent-color: #6b7ad9;
    --ds-font-family: "Open Sans", helveticaneue, helvetica, arial;
}

.ds__body {
    min-height: 100vh;
    overflow: hidden;
}

.ds__sidebar {
    display: flex;
    position: relative;
    align-items: center;
    z-index: 200;
    background: var(--ds-sidebar-bg);
    padding: 10px var(--ds-sidebars-paddings);
    width: 100%;
    min-height: 64px;
    color: var(--ds-sidebar-color);
    font-family: var(--ds-font-family), sans-serif;

    @include breakpoint(small only) {
        order: 20;
        width: 100%;
    }
}

.ds-title {
    display: flex;
    align-items: center;
    margin-right: 20px;
    padding-right: 20px;
    min-height: 34px;
    font-size: 20px;

    a {
        display: flex;
        position: absolute;
        top: 0;
        left: 0;
        justify-content: center;
        align-items: center;
        background: #2d3b83;
        width: 64px;
        height: 64px;
        color: white;
        font-family: var(--ds-font-family);
        text-decoration: none;
    }
}

.ds-menu,
.ds-menu__submenu {
    margin: 0;
    padding: 0;
    list-style: none;
}

.ds-menu__submenu {
    display: none;
    position: absolute;
    border-radius: 0 0 10px 10px;
    background: var(--ds-sidebar-bg);
    padding-top: 10px;
    padding-bottom: 10px;
    width: 290px;

    @include breakpoint(medium down) {
        position: relative;
        border-radius: 0;
        width: 100%;
    }
}

.ds-menu {
    display: flex;
    align-items: center;
    gap: 20px;
    margin-left: 40px;

    @include breakpoint(medium down) {
        display: none;
        position: absolute;
        top: 100%;
        right: 0;
        flex-direction: column;
        align-items: flex-start;
        border-top: 2px solid #2d3b84;
        background: #161f50;
        padding: 20px 16px;
        width: 100%;
        max-height: calc(100dvh - 64px);
        overflow: auto;

        li {
            width: 100%;
        }
    }

    .ds-link {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 8px 0;
        padding-right: 10px;
        padding-left: 10px;
        color: white;
        font-weight: 400;
        font-size: 13px;
        line-height: 1.4;
        text-decoration: none;

        svg {
            transition: transform 0.6s;
            margin-left: auto;
            width: 14px;
            height: auto;
            pointer-events: none;
        }

        &.ds-link--active {
            box-shadow: inset 4px 0 0 var(--ds-accent-color);
            font-weight: bold;
        }
    }

    .lvl1 {
        > .ds-link {
            svg {
                margin-left: 0;
                width: 8px;
            }

            &.ds-link--active {
                box-shadow: none;
                border-bottom: 4px solid var(--ds-accent-color);
            }
        }

        > .ds-menu__submenu {
            @include breakpoint(medium) {
                max-height: 90vh;
                overflow-x: hidden;
                overflow-y: auto;
            }
        }

        &.is-parent-item {
            position: relative;

            &.is-open {
                background: #232a59;

                > .ds-menu__submenu {
                    display: block;
                }
            }

            &.is-active {
                > .ds-link {
                    box-shadow: none;
                    border-bottom: 4px solid var(--ds-accent-color);
                }
            }
        }
    }

    .lvl2 {
        > .ds-link {
            padding-left: 28px;
        }

        .ds-menu__submenu {
            position: relative;
        }

        &.is-parent-item {
            &.is-active {
                > a {
                    background: #39406a;
                }

                > .ds-menu__submenu {
                    display: block;
                }
            }

            &.is-open {
                background: #39406a;

                > .ds-menu__submenu {
                    display: block;
                }
            }

            @include breakpoint(medium down) {
                &.is-active:not(.is-open) {
                    > .ds-menu__submenu {
                        display: none;
                    }
                }

                &.is-active.is-open {
                    > .ds-menu__submenu {
                        display: block;
                    }
                }
            }
        }
    }

    .lvl3 {
        > .ds-link {
            padding-left: 43px;
        }

        .ds-menu__submenu {
            background: #39416a;
        }
    }

    .is-parent-item {
        > .ds-link {
            &.ds-link--active {
                box-shadow: none;
                font-weight: unset;
            }
        }

        &.is-open {
            > .ds-link svg {
                transform: rotate(90deg);
            }
        }
    }
}

.ds-full-screen {
    color: white;
    font-size: 13px;
    text-decoration: none;

    @include breakpoint(medium down) {
        display: none;
    }
}

.ds-tabs-nav {
    display: flex;
    align-items: center;
    gap: 20px;
    margin: 0;
    margin-left: auto;
    padding-top: 0;
    padding-bottom: 0;
    list-style: none;

    @include breakpoint(medium down) {
        display: none;
    }

    &__link {
        display: block;
        padding: 10px;
        color: white;
        font-size: 13px;
        text-decoration: none;

        &.is-active {
            position: relative;
            font-weight: bold;

            &::after {
                display: block;
                position: absolute;
                bottom: -2px;
                left: 0;
                background: var(--ds-accent-color);
                width: 100%;
                height: 4px;
                content: "";
            }
        }
    }

    li:last-child {
        margin-left: auto;
    }
}

.ds-tabs {
    pre {
        overflow-x: auto;
    }

    .ds-tabs__panel {
        &:not(.is-active) {
            display: none;
        }
    }
}

.ds-tabs__content {
    padding-bottom: 0;
}

.viewports-sizes {
    display: flex;
    align-items: center;
    gap: 12px;
    margin-top: 0;
    margin-right: 30px;
    margin-bottom: 0;
    margin-left: auto;
    font-size: 13px;
    list-style: none;

    @include breakpoint(medium down) {
        display: none;
    }

    a {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 5px;
        color: var(--ds-accent-color);
        font-size: 11px;
        line-height: 1;
        font-family: var(--ds-font-family), sans-serif;
        text-decoration: none;

        &.fr-active {
            color: white;
        }
    }

    svg {
        display: block;
        order: -1;
        width: 20px;
        height: 20px;
    }
}

.viewport-wrapper {
    background: #f4f4f4;
}

.viewport-content {
    margin-right: auto;
    margin-left: auto;
    background: var(--body-bg);
    min-width: 0;
    max-width: 100%;

    iframe {
        display: block;
        flex-grow: 1;
        margin: 0;
        border: 0;
        padding: 0;
        width: 100%;
        min-height: calc(var(--vh, 1vh) * 100 - 57px);
        overflow: hidden;
    }
}

.ds-background {
    .ds-background__color {
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        width: calc(100% - 20px);
        height: 60px;
    }
}

.ds-block-title {
    margin-bottom: 40px;
    border-bottom: 1px solid;
    padding-bottom: 10px;
    color: var(--ds-accent-color);
    font-weight: bold;
    font-size: 24px;
    font-family: var(--ds-font-family), sans-serif;

    &:not(:first-child) {
        margin-top: 60px;
    }
}

.ds-block-subtitle {
    margin-bottom: 30px;
    font-weight: bold;
    font-size: 20px;
    font-family: var(--ds-font-family), sans-serif;

    &:not(:first-child) {
        margin-top: 40px;
    }
}

.ds-typography {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.ds-page {
    padding: var(--ds-content-paddings);
}

.ds-classes-table {
    border-collapse: collapse;
    width: 100%;

    thead {
        th {
            border-bottom: 1px solid rgb(226 232 240);
            padding-top: 8px;
            padding-bottom: 8px;
            font-weight: 600;
            text-align: left;

            &:first-child {
                width: 260px;
            }
        }
    }

    tbody {
        td {
            border-bottom: 1px solid rgba(226 232 240 / 50%);
            padding-top: 8px;
            padding-bottom: 8px;
            font-size: 12px;
            font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
        }
    }
}

.ds__main {
    height: calc(var(--vh, 1vh) * 100 - 57px);
    overflow: auto;
}

#context-tab,
#code-tab {
    padding: 20px;
}

pre[class*="language-"] {
    margin: 0;
    font-size: 14px;
}

body:has(.ds__body) {
    overflow: hidden;
}

.design-system-full-page {
}

.ds-options {
    margin: 0;
    padding: 0;
    list-style: none;

    .ds-options {
        margin-left: 30px;

        > li + li {
            margin-top: 20px;
        }
    }

    &__description {
        opacity: 0.5;
        margin-top: 5px;
        font-style: italic;
        font-size: 15px;
    }

    svg {
        display: none;
    }
}

.is-container {
    margin-right: auto;
    margin-left: auto;
    padding-right: 20px;
    padding-left: 20px;
    max-width: 1280px;

    > .ds-options {
        counter-reset: sevens;

        > li {
            counter-increment: sevens 1;
            background: #0000000a;
            padding: 20px;

            &::before {
                display: inline-block;
                vertical-align: middle;
                margin-right: 10px;
                border-radius: 30px;
                background: #161f50;
                width: 30px;
                height: 30px;
                content: counter(sevens);
                color: white;
                font-weight: bold;
                line-height: 30px;
                text-align: center;
            }

            > strong {
                font-size: 18px;

                svg {
                    display: inline-block;
                    vertical-align: middle;
                    width: 13px;
                    height: auto;
                }
            }

            > ul {
                margin-top: 10px;
            }

            + li {
                margin-top: 10px;
            }
        }
    }
}

.ds-hamburger {
    display: block;
    margin-left: auto;
    width: 40px;
    min-width: 40px;
    color: white;

    .ds-hamburger__close {
        display: none;
    }

    &.is-active {
        .ds-hamburger__close {
            display: block;
        }

        .ds-hamburger__bars {
            display: none;
        }

        + .ds-menu {
            display: flex;
            gap: 10px;
        }
    }

    @include breakpoint(medium) {
        display: none;
    }
}
