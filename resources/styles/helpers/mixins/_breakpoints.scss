@use "sass:math";
@use "sass:list";
@use "sass:map";

$breakpoints: (
    small: rem-calc(0),
    medium: rem-calc(640),
    large: rem-calc(1200),
    xlarge: rem-calc(1440),
    xxlarge: rem-calc(1920),
) !default;
$breakpoint-classes: (small medium large) !default;

@mixin breakpoint($val: small) {
    // Size or keyword
    $bp: list.nth($val, 1);

    // Value for max-width media queries
    $bp-max: 0;

    // Direction of media query (up, down, or only)
    $dir: if(list.length($val) > 1, list.nth($val, 2), up);

    // Eventual output
    $str: "only screen";

    // Is it a named media query?
    $named: false;

    // Orientation media queries have a unique syntax
    @if $bp == "landscape" or $bp == "portrait" {
        $str: $str + " and (orientation: #{$bp})";
    } @else {
        // Try to pull a named breakpoint out of the $breakpoints map
        @if type-of($bp) == "string" {
            @if map-has-key($breakpoints, $bp) {
                @if $dir == "only" {
                    $next-bp: map-next($breakpoints, $bp);

                    @if not $next-bp {
                        $bp-max: null;
                    } @else {
                        $bp-max: $next-bp - math.div(1, 16);
                    }
                }
                $bp: map.get($breakpoints, $bp);
                $named: true;
            } @else {
                $bp: 0;
            }
        }

        // Pixel and unitless values are converted to rems
        @if unit($bp) == "px" or unit($bp) == "" {
            $bp: rem-calc($bp);
        }

        @if unit($bp-max) == "px" or unit($bp-max) == "" {
            $bp-max: rem-calc($bp-max);
        }

        // Finally, the rem value is turned into an em value
        $bp: strip-unit($bp) * 1em;
        $bp-max: strip-unit($bp-max) * 1em;

        // Skip media query creation if the input is "0 up" or "0 down"
        @if $bp > 0 or $dir == "only" {
            // And lo, a media query was born
            @if $dir == "only" {
                @if $named == true {
                    $str: $str + " and (min-width: #{$bp})";

                    @if $bp-max {
                        $str: $str + " and (max-width: #{$bp-max})";
                    }
                } @else {
                    @debug 'ERROR: Only named media queries can have an "only" range.';
                }
            } @else if $dir == "down" {
                $max: $bp - math.div(1, 16);
                $str: $str + " and (max-width: #{$max})";
            } @else {
                $str: $str + " and (min-width: #{$bp})";
            }
        }
    }

    // Output
    @if $bp == 0 and $dir != "only" {
        @content;
    } @else {
        @media #{$str} {
            @content;
        }
    }
}

/// Prefixes selector $class with breakpoint keywords, allowing you to create a batch of breakpoint classes with one chunk of code. If you want to skip a breakpoint (like small, because mobile first and all that), add values to the $omit parameter.
///
/// @param {string} $class - Class to prefix with the breakpoint name and a hyphen.
/// @param {list} $omit - Named breakpoints to skip. No class will be added with breakpoints in this list.
@mixin each-breakpoint($class, $omit: ()) {
    // Iterate through breakpoint classes
    @each $size in $breakpoint-classes {
        // Only do something if the breakpoint is not in $omit
        @if not index($omit, $size) {
            $val: map.get($breakpoints, $size);

            // Prefix $class with $size and a hyphen
            .#{$size + "-" + $class} {
                @include breakpoint($size) {
                    @content;
                }
            }
        }
    }
}
