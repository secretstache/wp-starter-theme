@use "sass:math";
@use "sass:string";

////
/// Helper function to easily use an SVG inline in CSS
/// without encoding it to base64, saving bytes.
/// It also helps with browser support.
////

/// A small function allowing skipping base64 encoding
/// and simply pasting the SVG markup right in the CSS.
/// @author Jakob Eriksen
/// @link http://codepen.io/jakob-e/pen/doMoML
/// @param {String} $svg - SVG image to encode
/// @return {String} - Encoded SVG data uri
//  background: svg-uri('<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="18.4px" height="9.4px" viewBox="0 0 18.4 9.4" style="enable-background:new 0 0 18.4 9.4;" xml:space="preserve"><path style="fill:#5BD8C6;" d="M9.2,9.4c-0.8,0-1.6-0.3-2.1-0.9L0,1.4L1.4,0l7.1,7.1c0.4,0.4,1,0.4,1.4,0L17,0l1.4,1.4l-7.1,7.1 C10.7,9.1,10,9.4,9.2,9.4z"/></svg>');
@function svg-uri($svg) {
    $encoded: "";
    $slice: 2000;
    $index: 0;
    $loops: math.ceil(math.div(string.length($svg), $slice));

    @for $i from 1 through $loops {
        $chunk: string.slice($svg, $index, $index + $slice - 1);
        $chunk: str-replace($chunk, '"', "'");
        $chunk: str-replace($chunk, "<", "%3C");
        $chunk: str-replace($chunk, ">", "%3E");
        $chunk: str-replace($chunk, "&", "%26");
        $chunk: str-replace($chunk, "#", "%23");
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}
